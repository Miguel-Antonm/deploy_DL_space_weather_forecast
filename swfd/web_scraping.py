# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_web_scraping.ipynb (unless otherwise specified).

__all__ = ['getHtmlSfu', 'getCredentials', 'getListDataSfu', 'fixDates', 'fixSfuValues', 'fixValues', 'sfuScv',
           'webScraping', 'main']

# Cell

#Webscrapping
from time import sleep
from selenium import webdriver
import datetime

#Save data
import re
import pandas as pd

#Resources
import random
from fastcore.script import * # @Callparser
from .resources import getInfo


# Cell
def getHtmlSfu(currentdate,originaldate):

    source_code=""
    try:
        op = webdriver.ChromeOptions()
        op.add_argument('headless')
        driver = webdriver.Chrome(options=op)
        currentday = datetime.datetime.now()
        driver.get("https://esc.cbk.waw.pl/products/api.php?parameter=f10_7&start_date="+str(originaldate.year)+"%2F"+str(originaldate.month)+"%2F"+str(originaldate.day)+"+00%3A00&end_date="+str(currentdate.year)+"%2F"+str(currentdate.month)+"%2F"+str(currentdate.day)+"+00%3A00&output_type=html")
        sleep(random.uniform(8,10))


        user = driver.find_element_by_name("callback_0")
        password = driver.find_element_by_name("callback_1")
        button = driver.find_element_by_name("callback_2")

        credentials=getCredentials()

        if(credentials[0] and credentials[1]):
            user.send_keys(credentials[0])
            password.send_keys(credentials[1])
            button.click()
            sleep(random.uniform(15,10))

            elem = driver.find_element_by_xpath("//*")
            source_code = elem.get_attribute("outerHTML")
        else:
            print("user or password not found in txt")

    except:
        e = sys.exc_info()[0]
        print("Exception: ", e)
        print("Make sure you have the internet and the selenium driver is in the sfw.")
    finally:
        driver.quit()

    return source_code




# Cell
def getCredentials():
    credentials=[]
    user=getInfo("user")
    password=getInfo("password")
    credentials.append(user)
    credentials.append(password)
    return credentials


# Cell
def getListDataSfu(html):

    datalist=[]

    oldsfu=re.findall('<tbody>(.*?)<td>1996-02-14',str(html),re.DOTALL)
    dailysfu=re.findall('<tr>(.*?)</tr>',str(oldsfu),re.DOTALL)
    for day in dailysfu:
        if(re.findall("(.*?)00:00:00</td>",day)):
            datedata=re.findall("<td>(.*?) 00:00:00</td>",day)
            sfudata=re.findall("</td><td>(.*?)<",day)
            datalist.append([datedata[0],sfudata[0]])

    newsfu=re.findall('<td>1996-02-13 00:00:00</td><td>68</td></tr>(.*?)</tbody></table></div></body></html>',str(html),re.DOTALL)
    dailysfu=re.findall('<tr>(.*?)</tr>',str(newsfu),re.DOTALL)
    for day in dailysfu:
        if(re.findall("(.*?)20:00:00</td>",day)):
            datedata=re.findall("<td>(.*?) 20:00:00</td>",day)
            sfudata=re.findall("</td><td>(.*?)<",day)
            datalist.append([datedata[0],sfudata[0]])

    return datalist[::-1]

# Cell
def fixDates(datosSfu):
    alldatasfu=[]
    #Dia actual porque el primer registro siempre sera hoy-1
    csvdaybefore=datetime.datetime.combine(datetime.datetime.today(), datetime.time.min)
    #csvdaybefore=csvdaybefore+datetime.timedelta(days=1)
    for record in datosSfu:
        realdaybefore=csvdaybefore-datetime.timedelta(days=1)
        csvdaybefore = datetime.datetime.strptime(record[0], '%Y-%m-%d')
        #Si el dia de ayer no es igual al de hoy-1 faltan datos de un dia
        if not(realdaybefore == csvdaybefore):
            while(not(realdaybefore == csvdaybefore)):
                alldatasfu.append([realdaybefore.strftime('%Y-%m-%d'),"-1"])
                realdaybefore=realdaybefore-datetime.timedelta(days=1)


        alldatasfu.append(record)
    return alldatasfu

# Cell
def fixSfuValues(datossfu):
    meanvalue=-1
    if datossfu[0][1]=='-1':
        cont=1
        while datossfu[0][1] == '-1' and cont<len(datossfu):
            if datossfu[cont][1] != '-1':
                datossfu[0][1]=datossfu[cont][1]
            cont=cont+1

    for i in range (1, len(datossfu)-1):
        if(datossfu[i][1]=='-1'):
            cont=i
            while datossfu[i][1] == '-1' and cont<len(datossfu):
                if datossfu[cont][1] != '-1':
                    datossfu[i][1]=str((float(datossfu[i-1][1])+float(datossfu[cont][1]))/2)
                cont=cont+1

    if(datossfu[len(datossfu)-1][1]=='-1'):
        datossfu[len(datossfu)-1][1]=datossfu[len(datossfu)-2][1]

    return datossfu

# Cell
def fixValues(datossfu):
    fixdata=fixDates(datossfu)
    fixdata=fixSfuValues(fixdata)
    return fixdata


# Cell
def sfuScv(datalist):
    path=getInfo("csvdirectory")+"sfuData.csv"
    df = pd.DataFrame(datalist, columns= ['Date', 'Sfu'])
    df.to_csv(path, header = False, index = False)

# Cell
def webScraping():
    datosSfu=[]

    currentdate = datetime.datetime.now()
    originaldate=datetime.datetime(1949, 1, 1)
    sourcecode=getHtmlSfu(currentdate,originaldate)
    pagelogin=re.findall("<title>OpenAM - (.*?)</title>",sourcecode)
    print(sourcecode)
    if(sourcecode!="" and not(pagelogin) ):
        datosSfu=getListDataSfu(sourcecode)
        datosSfu=fixValues(datosSfu)

        sfuScv(datosSfu)
        print("Sfu updated")
    elif(pagelogin):
        if(pagelogin[0]=="Login"):
            print("Please check that your username and password are entered correctly. ")



# Cell
@call_parse
def main():
    webScraping()
