# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05_menu.ipynb (unless otherwise specified).

__all__ = ['createFile', 'changeTxtOption', 'showTxtOptions', 'chooseOption', 'showmenu', 'showPredictionsMenu',
           'showTxtMenu', 'main']

# Cell

import os
import datetime

from fastcore.script import * # @Callparser

from .web_scraping import webScraping
from .download_model import downloadModel
from .resources import getInfo
from .manage_data import updatePredicts,doNewPredicts,infoDatesPredicts

# Cell
def createFile():
    archi1=open("settings.txt","w")
    archi1.write("user=''\n")
    archi1.write("password=''\n")
    archi1.write("csvdirectory=''\n")
    archi1.write("pthdirectory=''\n")
    archi1.close()

# Cell
def changeTxtOption(line_num,option):

    with open("settings.txt", 'r') as txt:
        lines = txt.readlines()
        value=lines[line_num].split("'")[-2]


        if option != "password" and value!='':
            print("Current "+option+" value: "+value)
        if option=="csvdirectory" or option=="pthdirectory":
            print("It must starts and ends with / \nE.g: /home/user/desktop/folder1/csvfolder/ ")

        inputstring = str(input("Enter the value for "+option+" (write '0' to back): "))

        if(inputstring!="0"):
            print("prueba"+lines[line_num] +"\n")
            lines[line_num] = option+"='"+inputstring+"'\n"
            with open("settings.txt", 'w') as txt:
                txt.writelines(lines)
                print(option+" update")


# Cell
def showTxtOptions():
    try:
        with open("settings.txt", 'r') as txt:
            try:
                lines = txt.readlines()
                print("**********txt************\n")
                for line in lines:
                    option=line.split("=")[-2]
                    if(option != "password"):
                        print(line)
                print("\n*************************\n")
            finally:
                txt.close()
    except IOError:
        print("File not accessible")


# Cell
def chooseOption():
    isnumber=False
    while(not isnumber):
        try:
            option = int(input("Enter the number of the option: "))
            isnumber=True
        except ValueError:
            print('Error, Need a correct option')

    return option

# Cell
def showmenu():
    os.system ("clear")
    exit=False
    while not exit:

        print("\n*******\n1-Download sfu data\n2-Download model\n3-Prediction settings\n4-Txt settings\n5-Exit\n*******\n")
        option=chooseOption()
        if option == 1:
            webScraping()
        elif option == 2:
            downloadModel()
        elif option == 3:
            showPredictionsMenu()
        elif option == 4:
            showTxtMenu()
        elif option == 5:
            exit = True
        else:
            print ("\n\nOption has to be between 1 and 5")

# Cell
def showPredictionsMenu():
    if os.path.isdir(getInfo("csvdirectory")):
        os.system ("clear")
        if(not os.path.isfile(getInfo("csvdirectory")+"predictionData.csv")):
            print("\npredictionData.csv not found, It will create and make new prediction\n")
            doNewPredicts(1)

        exit=False
        while not exit:
            print("\n*******\n1-Update predictions until today\n2-Extend past predictions\n3-back\n*******\n")
            startdate,enddate=infoDatesPredicts()
            if(startdate!=None and enddate!=None):
                print("\n\nFirst date loaded is: ",startdate.strftime("%Y-%m-%d"),"\nLast date loaded is: ",enddate.strftime("%Y-%m-%d"))
                option=chooseOption()
            else:
                print("You must predict first to use the file")
                option=2

            if option == 1:
                updatePredicts()
            elif option == 2:
                isnumber=False
                while(not isnumber):
                    try:
                        days = int(input("Enter the number of days to predict from {}: ".format(enddate)))
                        isnumber=True
                    except ValueError:
                        print('Error, Need a correct option')
                doNewPredicts(days)
            elif option == 3:
                exit = True
            else:
                print ("\n\nOption has to be between 1 and 3")
    else:
        print("\nPath to csv folder not found\n")

# Cell
def showTxtMenu():
    os.system ("clear")
    exit=False
    while not exit:
        print("\n*******\n1-Change ESA user\n2-Change ESA password\n3-Change csv directory\n4-Change pth directory\n5-Show txt\n6-Back\n*******\n")
        option=chooseOption()
        if option == 1:
            changeTxtOption(0,"user")
        elif option == 2:
            changeTxtOption(1,"password")
        elif option == 3:
            changeTxtOption(2,"csvdirectory")
        elif option == 4:
            changeTxtOption(3,"pthdirectory")
        elif option == 5:
            showTxtOptions()
        elif option == 6:
            exit = True
        else:
            print ("\n\nOption has to be between 1 and 6")

# Cell
@call_parse
def main():
    if not os.path.isfile("settings.txt"):
        createFile()
    showmenu()